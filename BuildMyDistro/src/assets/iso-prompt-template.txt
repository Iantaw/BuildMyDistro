You are to generate only a valid `.sh` file that builds a customized Linux ISO using the selected tools.

‚ö†Ô∏è You must follow these instructions exactly:
- Do not write anything other than the `.sh` script.
- Do not acknowledge this prompt.
- Do not include comments, explanations, or extra text outside the script.
- Do not use emojis, terminal colors, or styled output.
- Make sure you use Unix/Linux formatting. DO NOT use windows formatting.
- Make sure to use Unix Style line endings (LF).
- Feel free to use sudo, as passwordless sudo has been configured.
- Make sure to run apt-get update inside the chroot BEFORE installing the packages.
- You must insert the following plain echo statements before each major section to help an external server track progress:
    - `echo "Mounting"`
    - `echo "Installing"`
    - `echo "Configuring"`
    - `echo "Building"`
    - `echo "Complete"`

üõ† Script Constraints:
- This `.sh` file will be made for: **${selectedOS}**
- Only use the commands listed under that OS.
- Only install the tools the user selected from each category.
- The final ISO **must be saved** to `/opt/iso-builder/output` with any filename (e.g. `/opt/iso-builder/output/custom-${selectedOS}.iso`).
- The ISO will be considered invalid if it's saved elsewhere.
- The Base ISO files are located in:
    Ubuntu: `/opt/iso-builder/base-isos/ubuntu/noble-desktop-amd64.iso`
    Arch: `/opt/iso-builder/base-isos/arch/archlinux-2025.07.01-x86_64.iso`
    Debian: `/opt/iso-builder/base-isos/debian/debian-12.11.0-amd64-netinst.iso`

---

### üîß ISO Modification Commands Table

**Arch Linux ISO:**

(Browsers, install only ${selectedBrowsers})
- Firefox: `sudo pacman -S --noconfirm firefox`
- Brave: `yay -S --noconfirm brave-bin`
- Chromium: `sudo pacman -S --noconfirm chromium`

(Social, install only ${selectedSocial})
- Discord: `sudo pacman -S --noconfirm discord`
- Telegram: `sudo pacman -S --noconfirm telegram-desktop`
- Element: `sudo pacman -S --noconfirm element-desktop`

(Security, install only ${selectedSecurity})
- ufw: `sudo pacman -S --noconfirm ufw`
- ClamAV: `sudo pacman -S --noconfirm clamav`
- KeepassXC: `sudo pacman -S --noconfirm keepassxc`
- Tor Browser: `yay -S --noconfirm tor-browser`
- WireGuard: `sudo pacman -S --noconfirm wireguard-tools`

(Multimedia, install only ${selectedMultimedia})
- VLC: `sudo pacman -S --noconfirm vlc`
- MPV: `sudo pacman -S --noconfirm mpv`
- Pavucontrol: `sudo pacman -S --noconfirm pavucontrol`
- Spotify: `yay -S --noconfirm spotify`

(Productivity, install only ${selectedProductivity})
- LibreOffice: `sudo pacman -S --noconfirm libreoffice-fresh`
- Evince: `sudo pacman -S --noconfirm evince`
- OnlyOffice: `yay -S --noconfirm onlyoffice-bin`
- Zettlr: `yay -S --noconfirm zettlr-bin`

(Devtools, install only ${selectedDevtools})
- VS Code: `yay -S --noconfirm visual-studio-code-bin`
- Neovim: `sudo pacman -S --noconfirm neovim`
- Git: `sudo pacman -S --noconfirm git`
- Kitty: `sudo pacman -S --noconfirm kitty`
- Flatpak: `sudo pacman -S --noconfirm flatpak`

(Gaming, install only ${selectedGaming})
- Steam: `sudo pacman -S --noconfirm steam`
- Lutris: `sudo pacman -S --noconfirm lutris`
- MangoHUD: `sudo pacman -S --noconfirm mangohud`
- GameMode: `sudo pacman -S --noconfirm gamemode`

(Hyprland Customization, install only ${selectedHyprland})
- Hyprland: `sudo pacman -S --noconfirm hyprland`
- Waybar, Wofi, Rofi: `sudo pacman -S --noconfirm waybar wofi rofi`
- Pywal: `sudo pacman -S --noconfirm python-pywal`
- Kitty: `sudo pacman -S --noconfirm kitty`
- LXAppearance: `sudo pacman -S --noconfirm lxappearance`

---

**Ubuntu/Debian ISO:**

ONLY FOR DEBIAN, Before installing packages, ensure the script configures the Debian package sources by creating or overwriting the file /etc/apt/sources.list inside the chroot directory with the following lines:

deb http://deb.debian.org/debian bookworm main contrib non-free
deb http://security.debian.org/debian-security bookworm-security main
deb http://deb.debian.org/debian bookworm-updates main contrib non-free

This should be done by a command such as:

cat <<EOF > "$WORKDIR/chroot/etc/apt/sources.list"
deb http://deb.debian.org/debian bookworm main contrib non-free
deb http://security.debian.org/debian-security book

Resume as normal for both debian and ubuntu below.

(Browsers, install only ${selectedBrowsers})
- Firefox: `chroot /tmp/work/chroot apt-get install -y firefox`
- Brave: `chroot /tmp/work/chroot sh -c 'curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg && echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main" >> /etc/apt/sources.list.d/brave.list && apt-get update && apt-get install -y brave-browser'`
- Chromium: `chroot /tmp/work/chroot apt-get install -y chromium-browser`

(Social, install only ${selectedSocial})
- Discord: `chroot /tmp/work/chroot sh -c 'wget -O /tmp/discord.deb "https://discord.com/api/download?platform=linux&format=deb" && dpkg -i /tmp/discord.deb || apt-get install -f -y'`
- Telegram: `chroot /tmp/work/chroot apt-get install -y telegram-desktop`
- Element: `chroot /tmp/work/chroot apt-get install -y element-desktop`

(Security, install only ${selectedSecurity})
- ufw: `chroot /tmp/work/chroot apt-get install -y ufw`
- ClamAV: `chroot /tmp/work/chroot apt-get install -y clamav`
- KeepassXC: `chroot /tmp/work/chroot apt-get install -y keepassxc`
- Tor Browser: `chroot /tmp/work/chroot apt-get install -y torbrowser-launcher`
- WireGuard: `chroot /tmp/work/chroot apt-get install -y wireguard`

DESKTOP Environment IS ONLY FOR DEBIAN!!! DO NOT RUN DESKTOP ENVIRONMENT ON UBUNTU!!!
(Desktop Environment, install only ${selectedDebianEnvironment})
- KDE Plasma: `sudo chroot /tmp/work/chroot apt-get install -y plasma-desktop`
- GNOME: `sudo chroot /tmp/work/chroot apt-get install -y ubuntu-desktop`
- Xfce: `sudo chroot /tmp/work/chroot apt-get install -y xubuntu-desktop`
- LXDE: `sudo chroot /tmp/work/chroot apt-get install -y lxde`
- LXQ1: `sudo chroot /tmp/work/chroot apt-get install -y lubuntu-desktop`
- MATE: `sudo chroot /tmp/work/chroot apt-get install -y mate-desktop-environment mate-desktop-environment-extras ubuntu-mate-themes`

(Multimedia, install only ${selectedMultimedia})
- VLC: `chroot /tmp/work/chroot apt-get install -y vlc`
- MPV: `chroot /tmp/work/chroot apt-get install -y mpv`
- Pavucontrol: `chroot /tmp/work/chroot apt-get install -y pavucontrol`
- Spotify: `chroot /tmp/work/chroot sh -c 'curl -sS https://download.spotify.com/debian/pubkey_0D811D58.gpg | gpg --dearmor -o /usr/share/keyrings/spotify.gpg && echo "deb [signed-by=/usr/share/keyrings/spotify.gpg] http://repository.spotify.com stable non-free" >> /etc/apt/sources.list.d/spotify.list && apt-get update && apt-get install -y spotify-client'`

(Productivity, install only ${selectedProductivity})
- LibreOffice: `chroot /tmp/work/chroot apt-get install -y libreoffice`
- Evince: `chroot /tmp/work/chroot apt-get install -y evince`
- OnlyOffice: `chroot /tmp/work/chroot sh -c 'wget -O /tmp/onlyoffice.deb https://download.onlyoffice.com/install/desktop/editors/linux/onlyoffice-desktopeditors_amd64.deb && dpkg -i /tmp/onlyoffice.deb || apt-get install -f -y'`
- Zettlr: `chroot /tmp/work/chroot sh -c 'wget -O /tmp/zettlr.deb https://github.com/Zettlr/Zettlr/releases/latest/download/Zettlr.deb && dpkg -i /tmp/zettlr.deb || apt-get install -f -y'`

(Devtools, install only ${selectedDevtools})
- VS Code: `chroot /tmp/work/chroot sh -c 'wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /etc/apt/trusted.gpg.d/packages.microsoft.gpg && echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" >> /etc/apt/sources.list.d/vscode.list && apt-get update && apt-get install -y code'`
- Neovim: `chroot /tmp/work/chroot apt-get install -y neovim`
- Git: `chroot /tmp/work/chroot apt-get install -y git`
- Kitty: `chroot /tmp/work/chroot apt-get install -y kitty`
- Flatpak: `chroot /tmp/work/chroot apt-get install -y flatpak`

(Gaming, install only ${selectedGaming})
- Steam: `chroot /tmp/work/chroot sh -c 'dpkg --add-architecture i386 && apt-get update && apt-get install -y steam'`
- Lutris: `chroot /tmp/work/chroot sh -c 'add-apt-repository -y ppa:lutris-team/lutris && apt-get update && apt-get install -y lutris'`
- MangoHUD: `chroot /tmp/work/chroot apt-get install -y mangohud`
- GameMode: `chroot /tmp/work/chroot apt-get install -y gamemode`

---

### üì¶ Final Build Requirements

The script must:
- Follow this structure:
  1. Mounting
  2. Installing
  3. Configuring
  4. Building
  5. Complete
- Build the ISO using `mkarchiso` (Arch) or `genisoimage`/`xorriso` (Debian/Ubuntu)
- Save final ISO file to `/opt/iso-builder/output`

Failure to echo steps or save the ISO to that path will result in a failed job.
